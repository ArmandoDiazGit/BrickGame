package brickBreaker;

import javax.swing.*;


import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;




public class GamePlay extends JPanel implements KeyListener, ActionListener {
    private boolean play = false;
    private int score = 0;

    private int totalBricks = 60;

    private Timer timer;
    private int delay = 8;

    private int playerX = 310;

    private int ballPosX = 120;
    private int ballposY = 350;
    private int ballXdir = -1;
    private int ballYdir = -1;

    private MapGenerator map;


    public GamePlay() {

        map = new MapGenerator(4, 12);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        timer = new Timer(delay, this);
        timer.start();
    }

    public void paint(Graphics g) {
        //background
        g.setColor(Color.BLACK);
        g.fillRect(1, 1, 900, 600);

        //drawing map
        map.draw((Graphics2D) g);


        // borders
        g.setColor(Color.white);
        g.fillRect(0, 0, 3, 592);
        g.fillRect(0, 0, 692, 3);
        g.fillRect(692, 0, 3, 592);

        // the scores
        g.setColor(Color.white);
        g.setFont(new Font("serif", Font.BOLD, 25));
        g.drawString("" + score, 590, 30);

        //the paddle
        g.setColor(Color.GREEN);
        g.fillRect(playerX, 550, 100, 8);

        //the ball
        g.setColor(Color.YELLOW);
        g.fillOval(ballPosX, ballposY, 20, 20);

        // when you win game
            if(totalBricks <= 0){
                play = false;
                ballXdir = 0;
                    ballYdir = 0;
                    g.setColor(Color.red);
                    g.setFont(new Font("serif", Font.BOLD,30));
                    g.drawString("You Win, Score: " + score, 260, 300);

                    g.setColor(Color.red);
                    g.setFont(new Font("serif", Font.BOLD,20));
                    g.drawString("Press (Space) to Restart", 230, 350);
            }

            // when you lose game
                if(ballposY > 570){
                    play = false;
                    ballXdir = 0;
                    ballYdir = 0;
                    g.setColor(Color.red);
                    g.setFont(new Font("serif", Font.BOLD, 20));
                    g.drawString("Game Over, Score: " + score, 190, 300);

                    g.setColor(Color.red);
                    g.setFont(new Font("serif", Font.BOLD, 30));
                    g.drawString("Press (Space) to Restart", 230, 350);

                    g.dispose();
                }


    }

    public void keyPressed(KeyEvent e) {

        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (playerX >= 600) {
                playerX = 600;
            } else {
                moveRight();
            }


        }

        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (playerX < 10) {
                playerX = 10;
            } else {
                moveLeft();
            }
        }

        if (e.getKeyCode() == KeyEvent.VK_SPACE){
            if(!play){
                play = true;
                ballPosX = 120;
                ballposY = 350;
                ballXdir = -1;
                ballYdir = -2;
                playerX = 310;
                score = 0;
                totalBricks = 21;
                map = new MapGenerator(3, 7);

                repaint();
            }
        }
    }

    private void moveLeft() {
        play = true;
        playerX -=20;
    }

    private void moveRight() {
        play = true;
        playerX +=20;
    }

    public void keyReleased(KeyEvent e){}
    public void keyTyped(KeyEvent e) {

    }


    public void actionPerformed(ActionEvent e) {
        timer. start();
            if(play){
                if(new Rectangle(ballPosX, ballposY, 20, 20).intersects(new Rectangle(playerX, 550, 30, 8)))
                        ballYdir = -ballYdir;
                    ballXdir = -2;
            } else if(new Rectangle(ballPosX, ballposY, 20, 20).intersects(new Rectangle(playerX + 70, 550, 30, 8))) {

                ballYdir = -ballYdir;
                ballXdir = ballXdir + 1;
            }

            else if(new Rectangle(ballPosX, ballposY, 20, 20).intersects(new Rectangle(playerX + 30, 550, 40, 8))){
                ballYdir = -ballYdir;
            }

            // check map collision with the ball
        A: for (int i = 0; i < map.map.length; i++){
                for (int j = 0; j < map.map[0].length; j++){

                    if (map.map[i] [j] > 0){

                        //scores++;
                        int brickX = j * map.brickWidth + 80;
                        int brickY = i * map.brickHeight + 50;
                        int brickWidth = map.brickWidth;
                        int brickHeight = map.brickHeight;

                        Rectangle rect = new Rectangle(brickX, brickY, brickWidth, brickHeight);
                        Rectangle ballRect = new Rectangle(ballPosX, ballposY, 20, 20);
                        Rectangle brickRect = rect;

                        if(ballRect.intersects(brickRect)){
                            map.setBrickValue(0, i, j);
                            score += 5;
                            totalBricks --;

                            // when ball hit right or left of brick
                            if(ballPosX + 19 <= brickRect.x || ballPosX + 1 >= brickRect.x + brickRect.width){
                                ballXdir = -ballYdir;
                            }

                            // when ball hits top or bottom of brick
                            else {
                                ballYdir = -ballYdir;
                            }

                            break A;
                        }
                    }
                }
        }

            ballPosX += ballXdir;
            ballposY += ballYdir;

            if (ballPosX < 0){
                ballXdir = -ballXdir;
            }
            if (ballposY < 0){
                ballYdir = -ballYdir;
            }
            if (ballPosX > 670){
                ballXdir = -ballXdir;
            }

            repaint();


    }
}
